#!/usr/bin/env python3
import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import subprocess
import socket
import threading
import platform
from PIL import Image, ImageTk
import sys


class ConnectionManager:
    def __init__(self):
        self.devices = {
            '198.18.200.193': {'protocol': 'telnet', 'port': 23, 'name': '–°–µ—Ç–µ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (Telnet)'},
            '198.18.200.49': {'protocol': 'ssh', 'port': 22, 'name': '–°–µ—Ä–≤–µ—Ä Linux (SSH)'},
            '198.18.200.48': {'protocol': 'vnc', 'port': 5900, 'name': '–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞ (VNC)'},
            '198.18.200.213': {'protocol': 'rdp', 'port': 3389, 'name': 'Windows —Å–µ—Ä–≤–µ—Ä (RDP)'}
        }

    def detect_protocol(self, ip):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"""
        if ip in self.devices:
            return self.devices[ip]['protocol'], self.devices[ip]['port']

        protocols = [
            ('ssh', 22),
            ('telnet', 23),
            ('rdp', 3389),
            ('vnc', 5900)
        ]

        for protocol, port in protocols:
            if self.test_port(ip, port):
                return protocol, port

        return None, None

    def test_port(self, ip, port, timeout=2):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞"""
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(timeout)
            result = sock.connect_ex((ip, port))
            sock.close()
            return result == 0
        except:
            return False


class ModernRemoteConnectionApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üöÄ Remote Connection Manager Pro")
        self.root.geometry("700x600")
        self.root.resizable(True, True)
        self.root.configure(bg='#2c3e50')

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∏–ª—è
        self.setup_styles()

        self.conn_manager = ConnectionManager()
        self.setup_ui()

    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ç–∏–ª–µ–π"""
        style = ttk.Style()
        style.theme_use('clam')

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤
        style.configure('TFrame', background='#2c3e50')
        style.configure('TLabel', background='#2c3e50', foreground='white', font=('Arial', 10))
        style.configure('Title.TLabel', background='#2c3e50', foreground='#3498db',
                        font=('Arial', 18, 'bold'))
        style.configure('Protocol.TLabel', background='#34495e', foreground='#ecf0f1',
                        font=('Arial', 11, 'bold'))
        style.configure('Success.TLabel', background='#2c3e50', foreground='#2ecc71')
        style.configure('Error.TLabel', background='#2c3e50', foreground='#e74c3c')

        style.configure('TButton', font=('Arial', 10, 'bold'), padding=10)
        style.map('Accent.TButton',
                  background=[('active', '#2980b9'), ('pressed', '#1c638e')])
        style.configure('Accent.TButton', background='#3498db', foreground='white')

        style.configure('TCombobox', padding=5)
        style.configure('TEntry', padding=5)

    def setup_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        notebook = ttk.Notebook(self.root)
        notebook.pack(fill='both', expand=True, padx=10, pady=10)

        # –í–∫–ª–∞–¥–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        conn_frame = ttk.Frame(notebook, padding=20)
        notebook.add(conn_frame, text='üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ')

        # –í–∫–ª–∞–¥–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        help_frame = ttk.Frame(notebook)
        notebook.add(help_frame, text='üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è')

        self.setup_connection_tab(conn_frame)
        self.setup_help_tab(help_frame)

    def setup_connection_tab(self, parent):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(parent, text="–£–¥–∞–ª–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º",
                                style='Title.TLabel')
        title_label.pack(pady=(0, 20))

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ttk.Frame(parent)
        main_container.pack(fill='both', expand=True)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        left_frame = ttk.LabelFrame(main_container, text="üì± –í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", padding=15)
        left_frame.pack(side='left', fill='y', padx=(0, 10))

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        right_frame = ttk.LabelFrame(main_container, text="üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", padding=15)
        right_frame.pack(side='right', fill='both', expand=True)

        self.setup_devices_panel(left_frame)
        self.setup_auth_panel(right_frame)

    def setup_devices_panel(self, parent):
        """–ü–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        ttk.Label(parent, text="–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä:").pack(anchor='w', pady=(0, 10))

        self.device_var = tk.StringVar()
        device_listbox = tk.Listbox(parent, height=6, font=('Arial', 10),
                                    bg='#34495e', fg='white', selectbackground='#3498db')

        for ip, info in self.conn_manager.devices.items():
            device_listbox.insert(tk.END, f"{info['name']}\nIP: {ip}")

        device_listbox.pack(fill='x', pady=(0, 15))
        device_listbox.bind('<<ListboxSelect>>', self.on_device_select)

        # –†—É—á–Ω–æ–π –≤–≤–æ–¥ IP
        ttk.Label(parent, text="–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ IP –≤—Ä—É—á–Ω—É—é:").pack(anchor='w', pady=(10, 5))

        ip_frame = ttk.Frame(parent)
        ip_frame.pack(fill='x', pady=(0, 15))

        self.ip_var = tk.StringVar()
        ip_entry = ttk.Entry(ip_frame, textvariable=self.ip_var, font=('Arial', 11))
        ip_entry.pack(side='left', fill='x', expand=True)
        ip_entry.bind('<KeyRelease>', self.on_ip_change)

        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        test_btn = ttk.Button(ip_frame, text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", command=self.test_connection,
                              style='Accent.TButton', width=10)
        test_btn.pack(side='right', padx=(5, 0))

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ç–æ–∫–æ–ª–µ
        protocol_frame = ttk.Frame(parent, relief='solid', borderwidth=1)
        protocol_frame.pack(fill='x', pady=(10, 0))

        ttk.Label(protocol_frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:",
                  font=('Arial', 10, 'bold')).pack(anchor='w', pady=(5, 10))

        self.protocol_label = ttk.Label(protocol_frame, text="–ü—Ä–æ—Ç–æ–∫–æ–ª: –ù–µ –≤—ã–±—Ä–∞–Ω",
                                        style='Protocol.TLabel')
        self.protocol_label.pack(anchor='w', pady=2)

        self.port_label = ttk.Label(protocol_frame, text="–ü–æ—Ä—Ç: -", style='Protocol.TLabel')
        self.port_label.pack(anchor='w', pady=2)

        self.status_label = ttk.Label(protocol_frame, text="–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–Ω–∏–µ",
                                      style='Protocol.TLabel')
        self.status_label.pack(anchor='w', pady=2)

    def setup_auth_panel(self, parent):
        """–ü–∞–Ω–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        auth_frame = ttk.Frame(parent)
        auth_frame.pack(fill='both', expand=True)

        # –õ–æ–≥–∏–Ω
        ttk.Label(auth_frame, text="–õ–æ–≥–∏–Ω:", font=('Arial', 11, 'bold')).pack(anchor='w', pady=(10, 5))
        self.username_var = tk.StringVar()
        username_entry = ttk.Entry(auth_frame, textvariable=self.username_var,
                                   font=('Arial', 12), width=30)
        username_entry.pack(fill='x', pady=(0, 15))

        # –ü–∞—Ä–æ–ª—å
        ttk.Label(auth_frame, text="–ü–∞—Ä–æ–ª—å:", font=('Arial', 11, 'bold')).pack(anchor='w', pady=(5, 5))
        self.password_var = tk.StringVar()
        password_entry = ttk.Entry(auth_frame, textvariable=self.password_var,
                                   show="‚Ä¢", font=('Arial', 12), width=30)
        password_entry.pack(fill='x', pady=(0, 20))

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.connect_button = ttk.Button(auth_frame, text="üöÄ –£–°–¢–ê–ù–û–í–ò–¢–¨ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï",
                                         command=self.connect, style='Accent.TButton',
                                         state=tk.DISABLED)
        self.connect_button.pack(fill='x', pady=10)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress = ttk.Progressbar(auth_frame, mode='indeterminate')
        self.progress.pack(fill='x', pady=5)

        # –ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        history_frame = ttk.LabelFrame(auth_frame, text="üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π", padding=10)
        history_frame.pack(fill='both', expand=True, pady=(20, 0))

        self.history_text = scrolledtext.ScrolledText(history_frame, height=6,
                                                      bg='#ecf0f1', font=('Arial', 9))
        self.history_text.pack(fill='both', expand=True)
        self.history_text.config(state=tk.DISABLED)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏
        username_entry.bind('<KeyRelease>', self.check_fields)
        password_entry.bind('<KeyRelease>', self.check_fields)

    def setup_help_tab(self, parent):
        """–í–∫–ª–∞–¥–∫–∞ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π"""
        help_text = """
üìã –ö–†–ê–¢–ö–ê–Ø –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ

1. üöÄ –ë–´–°–¢–†–û–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï:
   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞ "–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä"
   ‚Ä¢ –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"

2. üîê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø:
   ‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –≤ –ø–æ–ª–µ "–õ–æ–≥–∏–Ω"
   ‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –≤ –ø–æ–ª–µ "–ü–∞—Ä–æ–ª—å"
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–£–°–¢–ê–ù–û–í–ò–¢–¨ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï"

3. üîÑ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï:
   ‚Ä¢ –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   ‚Ä¢ –û—Ç–æ–±—Ä–∞–∑–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ä—Ç–µ –∏ —Å—Ç–∞—Ç—É—Å–µ

4. üìä –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú–´–ï –ü–†–û–¢–û–ö–û–õ–´:
   ‚úÖ SSH - –¥–ª—è Linux/Unix —Å–µ—Ä–≤–µ—Ä–æ–≤
   ‚úÖ Telnet - –¥–ª—è —Å–µ—Ç–µ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
   ‚úÖ RDP - –¥–ª—è Windows —Å–µ—Ä–≤–µ—Ä–æ–≤
   ‚úÖ VNC - –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞

5. ‚ö†Ô∏è –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
   ‚Ä¢ –î–ª—è RDP –Ω–∞ Windows: –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
   ‚Ä¢ –î–ª—è SSH: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π ssh-–∫–ª–∏–µ–Ω—Ç
   ‚Ä¢ –î–ª—è VNC: VNC Viewer
   ‚Ä¢ –î–ª—è Telnet: –≤–∫–ª—é—á–µ–Ω–Ω—ã–π telnet-–∫–ª–∏–µ–Ω—Ç

6. üõ†Ô∏è –£–°–¢–†–ê–ù–ï–ù–ò–ï –ù–ï–ü–û–õ–ê–î–û–ö:
   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (ping)
   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è
   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–∞

7. üí° –ü–û–î–°–ö–ê–ó–ö–ò:
   ‚Ä¢ –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞
   ‚Ä¢ Enter –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
   ‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏

   Desktop2Proxy WHAT 27.09.2025
(—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π)

–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã main.py, connectud.py, desired_outcome.py, readme.txt

–¶–µ–ª—è–º–∏ main.py —è–≤–ª—è—é—Ç—Å—è:

1. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –≤ –≤–≤–æ–¥–∏–º–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
—Å–µ—Ç–µ–≤–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –∏–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∏ –µ–µ –≤–µ—Ä—Å–∏–∏, –∫–æ—Ç–æ—Ä–∞—è —Å—Ç–æ–∏—Ç –Ω–∞ —Å–µ—Ç–µ–≤–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ, —É–∫–∞–∑—ã–≤–∞–µ–º–æ–º
–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
3. –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã, –∫–æ—Ç–æ—Ä–∞—è —Å—Ç–æ–∏—Ç –Ω–∞ —Å–µ—Ç–µ–≤–æ–º
–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ (—Ñ–∏—á–∞)

–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: nmap, json



–¶–µ–ª—è–º–∏ connectud.py —è–≤–ª—è—é—Ç—Å—è:

1. –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ip-–∞–¥—Ä–µ—Å, –ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å) –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
–∫ —Å–µ—Ç–µ–≤—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º –∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º —Å–∏—Å—Ç–µ–º–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
2. –£–¥–∞–ª–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑: vnc, ssh, rdp, telnet
3. –í—ã–≤–æ–¥ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä) –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
—Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: 
1. –î–ª—è —Ä–∞–±–æ—Ç—ã Telnet –Ω–∞ Windows –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ Windows "–ö–ª–∏–µ–Ω—Ç Telnet"
2. –î–ª—è —Ä–∞–±–æ—Ç—ã vnc –Ω–µ–æ–±—Ö–æ–¥–∏–º vncviewer
3. –î–ª—è —Ä–∞–±–æ—Ç—ã RDP –Ω–∞ Windows –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä –≥—Ä—É–ø–ø–æ–≤—ã—Ö –ø–æ–ª–∏—Ç–∏–∫ Windows –≤–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç—É –æ—Ç
–∞—Ç–∞–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –æ—Ä–∞–∫—É–ª–∞ –∏ –≤ "–£—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—Ç—ã" —É–∫–∞–∑–∞—Ç—å "–û—Å—Ç–∞–≤–∏—Ç—å —É—è–∑–≤–∏–º–æ—Å—Ç—å"

–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: subprocess, socket, threading, platform, tkinter



desired_outcome.py —Å–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ –ø—Ä–æ—Ç–æ—Ç–∏–ø –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –ø—Ä–∏ –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ


–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:

main.py:
1. –í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å—Å
2. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ö–æ—Å—Ç–∞ –ø—Ä–∏ –ø–æ–º–æ—â–∏ nmap

connectud.py:
1. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ—Å–æ–≤ (–í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)
2. –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å
3. –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–º–µ—é—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"
p.s. —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ rdp, –∫—Ä–æ–º–µ Windows 11. –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–æ–∫, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏





        """

        help_text_widget = scrolledtext.ScrolledText(parent, wrap=tk.WORD,
                                                     bg='#ecf0f1', font=('Arial', 11))
        help_text_widget.pack(fill='both', expand=True, padx=10, pady=10)
        help_text_widget.insert('1.0', help_text)
        help_text_widget.config(state=tk.DISABLED)

    def on_device_select(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"""
        widget = event.widget
        selection = widget.curselection()
        if selection:
            index = selection[0]
            ip = list(self.conn_manager.devices.keys())[index]
            self.ip_var.set(ip)
            self.update_protocol_info(ip)
            self.add_to_history(f"–í—ã–±—Ä–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {self.conn_manager.devices[ip]['name']}")

    def on_ip_change(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ IP"""
        ip = self.ip_var.get()
        self.update_protocol_info(ip)

    def test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        ip = self.ip_var.get()
        if not ip:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return

        thread = threading.Thread(target=self._test_connection_thread, args=(ip,))
        thread.daemon = True
        thread.start()

    def _test_connection_thread(self, ip):
        """–ü–æ—Ç–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        self.root.after(0, lambda: self.status_label.config(text="–°—Ç–∞—Ç—É—Å: –ü—Ä–æ–≤–µ—Ä–∫–∞..."))
        self.root.after(0, self.progress.start)

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ ping
            param = '-n' if platform.system().lower() == 'windows' else '-c'
            result = subprocess.run(['ping', param, '1', ip],
                                    capture_output=True, text=True, timeout=5)

            if result.returncode == 0:
                protocol, port = self.conn_manager.detect_protocol(ip)
                if protocol:
                    self.root.after(0, lambda: self.status_label.config(
                        text=f"–°—Ç–∞—Ç—É—Å: –î–æ—Å—Ç—É–ø–Ω–æ ({protocol.upper()})"))
                    self.root.after(0, lambda: self.add_to_history(f"‚úì –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {ip} –¥–æ—Å—Ç—É–ø–Ω–æ"))
                else:
                    self.root.after(0, lambda: self.status_label.config(
                        text="–°—Ç–∞—Ç—É—Å: –î–æ—Å—Ç—É–ø–Ω–æ (–ø—Ä–æ—Ç–æ–∫–æ–ª –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω)"))
            else:
                self.root.after(0, lambda: self.status_label.config(text="–°—Ç–∞—Ç—É—Å: –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"))
                self.root.after(0, lambda: self.add_to_history(f"‚úó –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {ip} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"))

        except Exception as e:
            self.root.after(0, lambda: self.status_label.config(text="–°—Ç–∞—Ç—É—Å: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"))
            self.root.after(0, lambda: self.add_to_history(f"! –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {ip}: {str(e)}"))

        finally:
            self.root.after(0, self.progress.stop)

    def update_protocol_info(self, ip):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ç–æ–∫–æ–ª–µ"""
        if ip:
            protocol, port = self.conn_manager.detect_protocol(ip)
            if protocol:
                self.protocol_label.config(text=f"–ü—Ä–æ—Ç–æ–∫–æ–ª: {protocol.upper()}")
                self.port_label.config(text=f"–ü–æ—Ä—Ç: {port}")
                device_name = self.conn_manager.devices.get(ip, {}).get('name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ')
                self.add_to_history(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {device_name} ({protocol.upper()})")
            else:
                self.protocol_label.config(text="–ü—Ä–æ—Ç–æ–∫–æ–ª: –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
                self.port_label.config(text="–ü–æ—Ä—Ç: -")
        else:
            self.protocol_label.config(text="–ü—Ä–æ—Ç–æ–∫–æ–ª: –ù–µ –≤—ã–±—Ä–∞–Ω")
            self.port_label.config(text="–ü–æ—Ä—Ç: -")

        self.check_fields()

    def check_fields(self, event=None):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π"""
        ip = self.ip_var.get()
        username = self.username_var.get()
        password = self.password_var.get()

        if ip and username and password:
            self.connect_button.config(state=tk.NORMAL)
        else:
            self.connect_button.config(state=tk.DISABLED)

    def add_to_history(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        self.history_text.config(state=tk.NORMAL)
        self.history_text.insert(tk.END, f"{message}\n")
        self.history_text.see(tk.END)
        self.history_text.config(state=tk.DISABLED)

    def connect(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        ip = self.ip_var.get()
        username = self.username_var.get()
        password = self.password_var.get()

        protocol, port = self.conn_manager.detect_protocol(ip)

        if not protocol:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è {ip}")
            return

        self.add_to_history(f"‚åõ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {ip} –ø–æ {protocol.upper()}...")

        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=self.establish_connection,
                                  args=(ip, protocol, port, username, password))
        thread.daemon = True
        thread.start()

    def establish_connection(self, ip, protocol, port, username, password):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        self.root.after(0, lambda: self.status_label.config(text="–°—Ç–∞—Ç—É—Å: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ..."))
        self.root.after(0, self.progress.start)
        self.root.after(0, lambda: self.connect_button.config(state=tk.DISABLED))

        try:
            success = False
            if protocol == 'ssh':
                success = self.connect_ssh(ip, username, password, port)
            elif protocol == 'telnet':
                success = self.connect_telnet(ip, username, password, port)
            elif protocol == 'rdp':
                success = self.connect_rdp(ip, username, password, port)
            elif protocol == 'vnc':
                success = self.connect_vnc(ip, username, password, port)
            else:
                self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ—Ç–æ–∫–æ–ª {protocol} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"))

            if success:
                self.root.after(0, self.show_success)
            else:
                self.root.after(0, lambda: self.show_error("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å"))

        except Exception as e:
            self.root.after(0, lambda: self.show_error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"))
        finally:
            self.root.after(0, self.progress.stop)
            self.root.after(0, lambda: self.connect_button.config(state=tk.NORMAL))

    def connect_ssh(self, ip, username, password, port=22):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ SSH"""
        try:
            if platform.system() == "Windows":
                subprocess.Popen(['putty', f'-ssh', f'{username}@{ip}', f'-P', str(port), f'-pw', password])
            else:
                subprocess.Popen(['xterm', '-e', f'ssh {username}@{ip} -p {port}'])
            return True
        except Exception as e:
            self.add_to_history(f"‚úó SSH –æ—à–∏–±–∫–∞: {str(e)}")
            return False

    def connect_telnet(self, ip, username, password, port=23):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ Telnet"""
        try:
            if platform.system() == "Windows":
                subprocess.Popen(['telnet', ip, str(port)])
            else:
                subprocess.Popen(['xterm', '-e', f'telnet {ip} {port}'])
            return True
        except Exception as e:
            self.add_to_history(f"‚úó Telnet –æ—à–∏–±–∫–∞: {str(e)}")
            return False

    def connect_rdp(self, ip, username, password, port=3389):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ RDP"""
        try:
            if platform.system() == "Windows":
                subprocess.Popen(['mstsc', f'/v:{ip}:{port}'])
            else:
                subprocess.Popen(['xfreerdp', f'/v:{ip}:{port}', f'/u:{username}', f'/p:{password}'])
            return True
        except Exception as e:
            self.add_to_history(f"‚úó RDP –æ—à–∏–±–∫–∞: {str(e)}")
            return False

    def connect_vnc(self, ip, username, password, port=5900):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ VNC"""
        try:
            subprocess.Popen(['vncviewer', f'{ip}:{port}'])
            return True
        except Exception as e:
            self.add_to_history(f"‚úó VNC –æ—à–∏–±–∫–∞: {str(e)}")
            return False

    def show_success(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏"""
        self.status_label.config(text="–°—Ç–∞—Ç—É—Å: –ü–æ–¥–∫–ª—é—á–µ–Ω–æ")
        self.add_to_history("‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        messagebox.showinfo("–£—Å–ø–µ—Ö",
                            "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –æ–∫–Ω–µ.")

    def show_error(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        self.status_label.config(text="–°—Ç–∞—Ç—É—Å: –û—à–∏–±–∫–∞")
        self.add_to_history(f"‚úó {message}")
        messagebox.showerror("–û—à–∏–±–∫–∞", message)


def main():
    try:
        root = tk.Tk()
        app = ModernRemoteConnectionApp(root)
        root.mainloop()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")


if __name__ == "__main__":
    main()