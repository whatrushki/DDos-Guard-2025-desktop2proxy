import nmap
import json


def interpret_nmap_scan(ip_address):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ nmap –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    """
    nm = nmap.PortScanner()

    print(f"üéØ –í—ã–ø–æ–ª–Ω—è–µ–º: nmap {ip_address}")
    print("=" * 60)

    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –û–° (–±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã)
        nm.scan(hosts=ip_address, arguments='-O --osscan-limit')

        if ip_address not in nm.all_hosts():
            print(f"‚ùå –•–æ—Å—Ç {ip_address} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return None

        host_info = nm[ip_address]

        # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        interpret_results(host_info, ip_address)

        return host_info

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –û–°
        return simple_scan(ip_address)


def simple_scan(ip_address):
    """
    –ü—Ä–æ—Å—Ç–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –û–°
    """
    print("\nüîÑ –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –û–°...")
    nm = nmap.PortScanner()

    try:
        nm.scan(hosts=ip_address, arguments='-sS')

        if ip_address not in nm.all_hosts():
            print(f"‚ùå –•–æ—Å—Ç {ip_address} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return None

        host_info = nm[ip_address]
        interpret_results(host_info, ip_address)
        return host_info

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å—Ç–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return None


def safe_get_os_info(host_info):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –û–°
    """
    try:
        if 'osmatch' in host_info:
            osmatch = host_info['osmatch']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö osmatch
            if isinstance(osmatch, list) and osmatch:
                return osmatch
            elif isinstance(osmatch, dict):
                return [osmatch]  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫
            else:
                print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö OS: {type(osmatch)}")
                return []
        return []
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –û–°: {e}")
        return []


def detect_os(host_info, ip_address):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Ö–æ—Å—Ç–∞
    """
    print(f"\nüñ•Ô∏è –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –û–ü–ï–†–ê–¶–ò–û–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ {ip_address}")
    print("-" * 50)

    osmatch_list = safe_get_os_info(host_info)

    if osmatch_list:
        print("üìã –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã:")

        for i, os_match in enumerate(osmatch_list, 1):
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            accuracy = os_match.get('accuracy', 'N/A') if isinstance(os_match, dict) else 'N/A'
            name = os_match.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if isinstance(os_match, dict) else str(os_match)

            print(f"\n{i}. {name}")
            print(f"   üìä –¢–æ—á–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {accuracy}%")

            if isinstance(os_match, dict) and 'osclass' in os_match:
                os_class = os_match['osclass']
                if isinstance(os_class, dict):
                    vendor = os_class.get('vendor', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    os_family = os_class.get('osfamily', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    os_gen = os_class.get('osgen', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    type = os_class.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

                    print(f"   üè¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {vendor}")
                    print(f"   üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º–µ–π—Å—Ç–≤–æ –û–°: {os_family}")
                    print(f"   üîÑ –ü–æ–∫–æ–ª–µ–Ω–∏–µ –û–°: {os_gen}")
                    print(f"   üìù –¢–∏–ø: {type}")
                else:
                    print(f"   üìù –ö–ª–∞—Å—Å –û–°: {os_class}")

        # –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—É—é –û–°
        if isinstance(osmatch_list[0], dict):
            best_os = osmatch_list[0]
            best_accuracy = best_os.get('accuracy', '0')
            best_name = best_os.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

            print(f"\nüéØ –ù–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–∞—è –û–°: {best_name} (—Ç–æ—á–Ω–æ—Å—Ç—å: {best_accuracy}%)")
            analyze_os_security(best_name, best_os)
        else:
            print(f"\nüéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–∞—è –û–°: {osmatch_list[0]}")

    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É")
        print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   - –•–æ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("   - –ë—Ä–∞–Ω–¥–º–∞—É—ç—Ä –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("   - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –û–°")
        print("   - –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")


def analyze_os_security(os_name, os_info):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–π –û–°
    """
    print(f"\nüõ°Ô∏è –ê–ù–ê–õ–ò–ó –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –û–°:")
    print("-" * 30)

    if not isinstance(os_name, str):
        os_name = str(os_name)

    os_name_lower = os_name.lower()

    security_notes = []

    # –ê–Ω–∞–ª–∏–∑ Windows —Å–∏—Å—Ç–µ–º
    if 'windows' in os_name_lower:
        security_notes.append("‚úÖ Windows —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")

        if any(x in os_name_lower for x in ['xp', '2000', '2003']):
            security_notes.append("‚ö†Ô∏è –£—Å—Ç–∞—Ä–µ–≤—à–∞—è –≤–µ—Ä—Å–∏—è Windows - –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
        elif any(x in os_name_lower for x in ['7', 'vista']):
            security_notes.append("üî∏ Windows 7/Vista - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∞")
        elif any(x in os_name_lower for x in ['10', '11']):
            security_notes.append("‚úÖ –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Windows")

        security_notes.append("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–∞")

    # –ê–Ω–∞–ª–∏–∑ Linux —Å–∏—Å—Ç–µ–º
    elif 'linux' in os_name_lower:
        security_notes.append("‚úÖ Linux —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")

        if 'ubuntu' in os_name_lower or 'debian' in os_name_lower:
            security_notes.append("üí° –î–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ Debian")
        elif 'centos' in os_name_lower or 'red hat' in os_name_lower or 'rhel' in os_name_lower:
            security_notes.append("üí° –î–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ RHEL")

        security_notes.append("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é firewall, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è–¥—Ä–∞")

    # –ê–Ω–∞–ª–∏–∑ –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º
    elif 'router' in os_name_lower or 'switch' in os_name_lower:
        security_notes.append("üì° –°–µ—Ç–µ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    elif 'mac' in os_name_lower or 'darwin' in os_name_lower:
        security_notes.append("üçé macOS —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
    elif 'unix' in os_name_lower:
        security_notes.append("üêß Unix-–ø–æ–¥–æ–±–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
    else:
        security_notes.append("üîç –¢–∏–ø —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")

    # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    security_notes.append("üí° –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ —Å–∏—Å—Ç–µ–º—É")

    # –í—ã–≤–æ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    for note in security_notes:
        print(f"   ‚Ä¢ {note}")


def interpret_results(host_info, ip_address):
    """
    –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø {ip_address}")
    print("=" * 50)

    # –°—Ç–∞—Ç—É—Å —Ö–æ—Å—Ç–∞
    state = host_info.state()
    print(f"üìç –°—Ç–∞—Ç—É—Å —Ö–æ—Å—Ç–∞: {state}")

    if state != 'up':
        print("üí° –•–æ—Å—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω - –¥–∞–ª—å–Ω–µ–π—à–µ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ")
        return

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    detect_os(host_info, ip_address)

    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
    protocols = host_info.all_protocols()
    print(f"\nüì° –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤: {len(protocols)}")

    for protocol in protocols:
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑ {protocol.upper()} –ø–æ—Ä—Ç–æ–≤:")
        print("-" * 40)

        ports = host_info[protocol]
        open_ports = [p for p in ports if ports[p]['state'] == 'open']
        filtered_ports = [p for p in ports if ports[p]['state'] == 'filtered']
        closed_ports = [p for p in ports if ports[p]['state'] == 'closed']

        print(f"‚úÖ –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤: {len(open_ports)}")
        print(f"üõ°Ô∏è –§–∏–ª—å—Ç—Ä—É–µ–º—ã—Ö –ø–æ—Ä—Ç–æ–≤: {len(filtered_ports)}")
        print(f"‚ùå –ó–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤: {len(closed_ports)}")

        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤
        if open_ports:
            print(f"\nüìã –î–µ—Ç–∞–ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤:")
            for port in sorted(open_ports):
                port_info = ports[port]
                analyze_port(port, port_info, protocol)
        else:
            print("‚ÑπÔ∏è –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")


def analyze_port(port, port_info, protocol):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Ä—Ç –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º
    """
    try:
        service = port_info.get('name', 'unknown')
        product = port_info.get('product', '')
        version = port_info.get('version', '')

        print(f"   üö™ –ü–æ—Ä—Ç {protocol}/{port}: {service}")

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–ª—É–∂–±—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        service_analysis = analyze_service_type(port, service, product)
        if service_analysis:
            print(f"      üí° {service_analysis}")

        if product or version:
            print(f"      üì¶ {product} {version}".strip())
    except Exception as e:
        print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç–∞ {port}: {e}")


def analyze_service_type(port, service_name, product):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∏–ø —Å–ª—É–∂–±—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ä—Ç–∞ –∏ –∏–º–µ–Ω–∏
    """
    try:
        # –í–µ–±-—Å–µ—Ä–≤–∏—Å—ã
        web_ports = [80, 443, 8080, 8443, 8000, 3000]
        if port in web_ports or 'http' in str(service_name) or 'apache' in str(product).lower() or 'nginx' in str(
                product).lower():
            return "–í–µ–±-—Å–µ—Ä–≤–µ—Ä - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"

        # SSH/SFTP
        if port == 22 or 'ssh' in str(service_name):
            return "SSH —Å–µ—Ä–≤–∏—Å - –≤–æ–∑–º–æ–∂–µ–Ω —É–¥–∞–ª—ë–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø"

        # –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_ports = [21, 3306, 5432, 27017, 1433]
        db_services = ['ftp', 'mysql', 'postgresql', 'mongodb', 'mssql']
        if port in db_ports or any(db in str(service_name) for db in db_services):
            return "–°–µ—Ä–≤–∏—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"

        # –£–¥–∞–ª—ë–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        remote_ports = [3389, 5900, 5800, 23]
        if port in remote_ports or 'rdp' in str(service_name) or 'vnc' in str(service_name) or 'telnet' in str(
                service_name):
            return "–°–µ—Ä–≤–∏—Å —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è - –º–æ–∂–µ—Ç –±—ã—Ç—å —É—è–∑–≤–∏–º"

        # –ü–æ—á—Ç–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        mail_ports = [25, 110, 143, 465, 587, 993, 995]
        if port in mail_ports or 'smtp' in str(service_name) or 'pop3' in str(service_name) or 'imap' in str(
                service_name):
            return "–ü–æ—á—Ç–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"

        return None
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–ª—É–∂–±—ã: {e}"


def generate_security_report(host_info, ip_address):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    """
    print(f"\nüõ°Ô∏è –û–¢–ß–Å–¢ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –î–õ–Ø {ip_address}")
    print("=" * 50)

    security_notes = []

    try:
        for protocol in host_info.all_protocols():
            ports = host_info[protocol]
            open_ports = [p for p in ports if ports[p]['state'] == 'open']

            for port in open_ports:
                port_info = ports[port]
                service = port_info.get('name', 'unknown')

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤
                if port in [21, 23, 135, 139, 445]:
                    security_notes.append(f"‚ö†Ô∏è –ü–æ—Ä—Ç {port} ({service}) - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —É—è–∑–≤–∏–º")

                if 'telnet' in str(service) and port == 23:
                    security_notes.append(f"üîì Telnet –Ω–∞ –ø–æ—Ä—Ç—É 23 - –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª")

                if 'ftp' in str(service) and port == 21:
                    security_notes.append(f"üìÅ FTP –Ω–∞ –ø–æ—Ä—Ç—É 21 - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –¥–æ—Å—Ç—É–ø")

        if security_notes:
            for note in security_notes:
                print(note)
        else:
            print("‚úÖ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Å–ª—É–∂–± –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
def main():
    ip_address = input("–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å—Å: ")  # –í–∞—à —Ü–µ–ª–µ–≤–æ–π IP

    print("üîç –ò–ù–¢–ï–†–ü–†–ï–¢–ê–¢–û–† NMAP –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø –° –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï–ú –û–°")
    print("=" * 60)

    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    results = interpret_nmap_scan(ip_address)

    if results:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        generate_security_report(results, ip_address)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"\nüíæ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        print(f"üìß –•–æ—Å—Ç: {ip_address}")
        print(f"üìä –°—Ç–∞—Ç—É—Å: {results.state()}")

    else:
        print("‚ùå –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")


if __name__ == "__main__":
    main()

